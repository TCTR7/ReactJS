{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","data","post","id","content","user","comments","Post","document","getElementById","props","className","this","children","React","Component","Comment","CreateComment","state","handleUserChange","bind","handleTextChange","handleSubmit","event","value","target","setState","preventDefault","onCommentSubmit","trim","onSubmit","type","placeholder","onChange","CommentBox","handleCommentSubmit","comment","Date","now","newComments","concat","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af7cf406.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { render } from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst data = {\r\n  post: {\r\n    id: 123,\r\n    content:\r\n      \"What we hope ever to do with ease, we must first learn to do with diligence. â€” Samuel Johnson\",\r\n    user: \"Mark Thomas\"\r\n  },\r\n  comments: [\r\n    {\r\n      id: 0,\r\n      user: \"David\",\r\n      content: \"such. win.\"\r\n    },\r\n    {\r\n      id: 1,\r\n      user: \"Haley\",\r\n      content: \"Love it.\"\r\n    },\r\n    {\r\n      id: 2,\r\n      user: \"Peter\",\r\n      content: \"Who was Samuel Johnson?\"\r\n    },\r\n    {\r\n      id: 3,\r\n      user: \"Mitchell\",\r\n      content: \"@Peter get off Letters and do your homework\"\r\n    },\r\n    {\r\n      id: 4,\r\n      user: \"Peter\",\r\n      content: \"@mitchell ok :P\"\r\n    }\r\n  ]\r\n};\r\n\r\nconst node = document.getElementById(\"root\");\r\nclass Post extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"post\">\r\n        <h2 className=\"postAuthor\" id={this.props.id}>\r\n          {this.props.user}:{\" \"}\r\n          <span className=\"postBody\">{this.props.content}</span>\r\n        </h2>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPost.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  user: PropTypes.string.isRequired,\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nclass Comment extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"comment\">\r\n        <h2 className=\"commentAuthor\">\r\n          {this.props.user}:{\" \"}\r\n          <span className=\"commentContent\">{this.props.content}</span>\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nComment.propTypes = {\r\n  user: PropTypes.string.isRequired,\r\n  content: PropTypes.string.isRequired,\r\n  id: PropTypes.number.isRequired\r\n};\r\n\r\nclass CreateComment extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: \"\",\r\n      content: \"\"\r\n    };\r\n    this.handleUserChange = this.handleUserChange.bind(this);\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleUserChange(event) {\r\n    const value = event.target.value;\r\n    this.setState(() => ({\r\n      user: value\r\n    }));\r\n  }\r\n\r\n  handleTextChange(event) {\r\n    const value = event.target.value;\r\n    this.setState(() => ({\r\n      content: value\r\n    }));\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onCommentSubmit({\r\n      user: this.state.user.trim(),\r\n      content: this.state.content.trim()\r\n    });\r\n\r\n    this.setState(() => ({\r\n      user: \"\",\r\n      content: \"\"\r\n    }));\r\n  }\r\n  render() {\r\n    return (\r\n      <form className=\"createComment\" onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Your Name\"\r\n          value={this.state.user}\r\n          onChange={this.handleUserChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Thoughts?\"\r\n          value={this.state.content}\r\n          onChange={this.handleTextChange}\r\n        />\r\n        <input type=\"submit\" value=\"post\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nCreateComment.propTypes = {\r\n  onCommentSubmit: PropTypes.func.isRequired,\r\n  content: PropTypes.string\r\n};\r\n\r\nclass CommentBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      comments: this.props.comments\r\n    };\r\n    this.handleCommentSubmit = this.handleCommentSubmit.bind(this);\r\n  }\r\n  handleCommentSubmit(comment) {\r\n    const comments = this.state.comments;\r\n    comment.id = Date.now();\r\n    const newComments = comments.concat([comment]);\r\n    this.setState({\r\n      comments: newComments\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"commentBox\">\r\n        <Post\r\n          id={this.props.post.id}\r\n          content={this.props.post.content}\r\n          user={this.props.post.user}\r\n        />\r\n        {this.state.comments.map(function(comment) {\r\n          return (\r\n            <Comment\r\n              key={comment.id}\r\n              id={comment.id}\r\n              content={comment.content}\r\n              user={comment.user}\r\n            />\r\n          );\r\n        })}\r\n        <CreateComment onCommentSubmit={this.handleCommentSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCommentBox.propTypes = {\r\n  post: PropTypes.object,\r\n  comments: PropTypes.arrayOf(PropTypes.object)\r\n};\r\n\r\nfunction App(){\r\n\treturn(\r\n\t\t<CommentBox comments={data.comments} post={data.post}/>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}